name: Persistent RDP Final (Fixed)
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 360
    steps:
      - name: Configure RDP
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Set Timezone
        run: Set-TimeZone -Id "Arabic Standard Time"

      - name: Create User
        run: |
          $password = "Yusf@2000#RDP"
          New-LocalUser -Name "yusf2000" -Password (ConvertTo-SecureString -String $password -AsPlainText -Force) -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "yusf2000"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "yusf2000"
          echo "RDP_USER=yusf2000" >> $env:GITHUB_ENV
          echo "RDP_PASS=$password" >> $env:GITHUB_ENV

      - name: Install Software
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco install -y googlechrome vscode 7zip rclone

      - name: Download Files from Cloud
        env:
          RCLONE_CONF_BASE64: ${{ secrets.RCLONE_CONF }}
        run: |
          if ($env:RCLONE_CONF_BASE64) {
            Write-Host "RCLONE_CONF found. Decoding and downloading files..."
            $configPath = "$env:APPDATA\rclone\rclone.conf"
            New-Item -Path (Split-Path $configPath) -ItemType Directory -Force
            [System.IO.File]::WriteAllText($configPath, [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($env:RCLONE_CONF_BASE64)))
            rclone copy "gdrive1:My_RDP_Backup/Desktop" "C:\Users\yusf2000\Desktop" --ignore-errors
            rclone copy "gdrive1:My_RDP_Backup/Documents" "C:\Users\yusf2000\Documents" --ignore-errors
          } else {
            Write-Host "RCLONE_CONF not found. Skipping download."
          }

      - name: Connect to Tailscale
        run: |
          Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe" -OutFile "$env:TEMP\tailscale.exe"
          Start-Process "$env:TEMP\tailscale.exe" -ArgumentList "/S" -Wait
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Display RDP Info
        run: |
          Write-Host "========================================"
          Write-Host "RDP Address: ${{ env.TAILSCALE_IP }}"
          Write-Host "Username:    ${{ env.RDP_USER }}"
          Write-Host "Password:    ${{ env.RDP_PASS }}"
          Write-Host "========================================"
          
      - name: Keep Alive
        run: |
          while ($true) {
            Write-Host "[$(Get-Date)] Session is active."
            Start-Sleep -Seconds 60
          }

      - name: Upload Files to Cloud
        if: always()
        env:
          RCLONE_CONF_BASE64: ${{ secrets.RCLONE_CONF }}
        run: |
          if ($env:RCLONE_CONF_BASE64) {
            Write-Host "RCLONE_CONF found. Encoding and uploading files..."
            $configPath = "$env:APPDATA\rclone\rclone.conf"
            New-Item -Path (Split-Path $configPath) -ItemType Directory -Force
            [System.IO.File]::WriteAllText($configPath, [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($env:RCLONE_CONF_BASE64)))
            rclone copy "C:\Users\yusf2000\Desktop" "gdrive1:My_RDP_Backup/Desktop" --ignore-errors
            rclone copy "C:\Users\yusf2000\Documents" "gdrive1:My_RDP_Backup/Documents" --ignore-errors
          } else {
            Write-Host "RCLONE_CONF not found. Skipping upload."
          }
